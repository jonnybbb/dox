Index: web/src/test/java/ch/silviowangler/dox/web/taglib/DocumentAttributeListTagTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Copyright 2012 Silvio Wangler (silvio.wangler@gmail.com)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage ch.silviowangler.dox.web.taglib;\n\nimport ch.silviowangler.dox.api.DocumentReference;\nimport org.joda.time.DateTime;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.config.AutowireCapableBeanFactory;\nimport org.springframework.context.*;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.io.Resource;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport org.springframework.mock.web.MockHttpServletResponse;\nimport org.springframework.mock.web.MockPageContext;\nimport org.springframework.mock.web.MockServletContext;\nimport org.springframework.web.context.WebApplicationContext;\nimport org.springframework.web.servlet.support.RequestContext;\nimport org.springframework.web.servlet.support.RequestDataValueProcessor;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.PageContext;\nimport javax.servlet.jsp.tagext.Tag;\nimport java.io.IOException;\nimport java.lang.annotation.Annotation;\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport static junit.framework.Assert.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\n/**\n * @author Silvio Wangler\n * @since 0.1\n */\npublic class DocumentAttributeListTagTest {\n\n    private DocumentReference documentReference;\n    private DocumentAttributeListTag tag;\n    private PageContext pageContext;\n    private MessageSource messageSource;\n    private Map<String, Object> indices;\n    private ServletContext servletContext;\n    private MockHttpServletRequest request;\n\n\n    @Before\n    public void init() {\n\n        indices = new HashMap<String, Object>();\n\n        servletContext = new MockServletContext();\n\n        request = new MockHttpServletRequest(servletContext);\n        request.addPreferredLocale(Locale.GERMAN);\n\n        final RequestDataValueProcessor requestDataValueProcessor = mock(RequestDataValueProcessor.class);\n\n        request.setAttribute(RequestContext.WEB_APPLICATION_CONTEXT_ATTRIBUTE, new WebApplicationContext() {\n            @Override\n            public ServletContext getServletContext() {\n                return servletContext;\n            }\n\n            @Override\n            public String getId() {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public String getDisplayName() {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public long getStartupDate() {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public ApplicationContext getParent() {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public void publishEvent(ApplicationEvent event) {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public BeanFactory getParentBeanFactory() {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public boolean containsLocalBean(String name) {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public boolean containsBeanDefinition(String beanName) {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public int getBeanDefinitionCount() {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public String[] getBeanDefinitionNames() {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public String[] getBeanNamesForType(Class<?> type) {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public <T> Map<String, T> getBeansOfType(Class<T> type) throws BeansException {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public <T> Map<String, T> getBeansOfType(Class<T> type, boolean includeNonSingletons, boolean allowEagerInit) throws BeansException {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType) {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public Object getBean(String name) throws BeansException {\n                return messageSource;\n            }\n\n            @Override\n            public <T> T getBean(String name, Class<T> requiredType) throws BeansException {\n                return (T) requestDataValueProcessor;\n            }\n\n            @Override\n            public <T> T getBean(Class<T> requiredType) throws BeansException {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public Object getBean(String name, Object... args) throws BeansException {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public boolean containsBean(String name) {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public boolean isSingleton(String name) throws NoSuchBeanDefinitionException {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public boolean isPrototype(String name) throws NoSuchBeanDefinitionException {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public boolean isTypeMatch(String name, Class<?> targetType) throws NoSuchBeanDefinitionException {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public Class<?> getType(String name) throws NoSuchBeanDefinitionException {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public String[] getAliases(String name) {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public Environment getEnvironment() {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public String getMessage(String code, Object[] args, String defaultMessage, Locale locale) {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public String getMessage(String code, Object[] args, Locale locale) throws NoSuchMessageException {\n\n                if (\"attr.wicked\".equals(code)) {\n                    return \"Name\";\n                } else if (\"attr.aProp\".equals(code)) {\n                    return \"Name\";\n                } else if (\"attr.test\".equals(code)) {\n                    return \"Lisa\";\n                }\n\n                throw new UnsupportedOperationException(\"not yet implemented \" + code);\n            }\n\n            @Override\n            public String getMessage(MessageSourceResolvable resolvable, Locale locale) throws NoSuchMessageException {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public Resource[] getResources(String locationPattern) throws IOException {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public Resource getResource(String location) {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n\n            @Override\n            public ClassLoader getClassLoader() {\n                throw new UnsupportedOperationException(\"not yet implemented\");\n            }\n        });\n\n        pageContext = new MockPageContext(servletContext, request);\n        messageSource = mock(MessageSource.class);\n\n        documentReference = new DocumentReference(\"dummy.txt\");\n        documentReference.setIndices(indices);\n        tag = new DocumentAttributeListTag();\n        tag.setDocumentReference(documentReference);\n        tag.setPageContext(pageContext);\n    }\n\n    @Test\n    public void emptyListShouldResultInEmptyOutput() throws JspException, IOException {\n        assertEquals(Tag.SKIP_BODY, tag.doStartTag());\n        assertEquals(\"\", ((MockHttpServletResponse) pageContext.getResponse()).getContentAsString());\n    }\n\n    @Test\n    public void oneIndexShouldResultInEmptyOutput() throws JspException, IOException {\n\n        indices.put(\"wicked\", \"Hello\");\n\n        when(messageSource.getMessage(\"attr.wicked\", null, Locale.getDefault())).thenReturn(\"Name\");\n\n        assertEquals(Tag.SKIP_BODY, tag.doStartTag());\n        assertEquals(\"<ul><li>Name = Hello</li></ul>\\n\", ((MockHttpServletResponse) pageContext.getResponse()).getContentAsString());\n    }\n\n    @Test\n    public void twoIndexShouldResultInEmptyOutput() throws JspException, IOException {\n\n        indices.put(\"aProp\", \"Computer\");\n        indices.put(\"test\", \"Fellow\");\n\n        when(messageSource.getMessage(\"attr.aProp\", null, Locale.getDefault())).thenReturn(\"Name\");\n        when(messageSource.getMessage(\"attr.test\", null, Locale.getDefault())).thenReturn(\"Lisa\");\n\n        assertEquals(Tag.SKIP_BODY, tag.doStartTag());\n        assertEquals(\"<ul><li>Name = Computer</li><li>Lisa = Fellow</li></ul>\\n\", ((MockHttpServletResponse) pageContext.getResponse()).getContentAsString());\n    }\n\n    @Test\n    public void jodaTimeDateTimeShouldBeFormattedAccordingTheCurrentLocale() throws JspException, IOException {\n\n        indices.put(\"aProp\", new DateTime(2010, 11, 01, 0, 0));\n\n        when(messageSource.getMessage(\"attr.aProp\", null, Locale.getDefault())).thenReturn(\"Name\");\n\n        assertEquals(Tag.SKIP_BODY, tag.doStartTag());\n        assertEquals(\"<ul><li>Name = 01.11.2010</li></ul>\\n\", ((MockHttpServletResponse) pageContext.getResponse()).getContentAsString());\n    }\n\n    @Test\n    public void jodaTimeDateTimeShouldBeFormattedAccordingTheCanadianLocale() throws JspException, IOException {\n\n        request.addPreferredLocale(Locale.CANADA);\n\n        indices.put(\"aProp\", new DateTime(2010, 11, 01, 0, 0));\n\n        when(messageSource.getMessage(\"attr.aProp\", null, Locale.getDefault())).thenReturn(\"Name\");\n\n        assertEquals(Tag.SKIP_BODY, tag.doStartTag());\n        assertEquals(\"<ul><li>Name = 1-Nov-2010</li></ul>\\n\", ((MockHttpServletResponse) pageContext.getResponse()).getContentAsString());\n    }\n\n    @Test\n    public void jodaTimeDateTimeShouldBeFormattedAccordingTheUKLocale() throws JspException, IOException {\n\n        request.addPreferredLocale(Locale.UK);\n\n        indices.put(\"aProp\", new DateTime(2010, 11, 01, 0, 0));\n\n        when(messageSource.getMessage(\"attr.aProp\", null, Locale.getDefault())).thenReturn(\"Name\");\n\n        assertEquals(Tag.SKIP_BODY, tag.doStartTag());\n        assertEquals(\"<ul><li>Name = 01-Nov-2010</li></ul>\\n\", ((MockHttpServletResponse) pageContext.getResponse()).getContentAsString());\n    }\n}\n
===================================================================
--- web/src/test/java/ch/silviowangler/dox/web/taglib/DocumentAttributeListTagTest.java	(revision 56fd791df08faff8719682f103b20e00ca54a613)
+++ web/src/test/java/ch/silviowangler/dox/web/taglib/DocumentAttributeListTagTest.java	(revision )
@@ -63,7 +63,9 @@
     private ServletContext servletContext;
     private MockHttpServletRequest request;
 
+    private String newLine = System.getProperty("line.separator");
 
+
     @Before
     public void init() {
 
@@ -286,7 +288,7 @@
         when(messageSource.getMessage("attr.wicked", null, Locale.getDefault())).thenReturn("Name");
 
         assertEquals(Tag.SKIP_BODY, tag.doStartTag());
-        assertEquals("<ul><li>Name = Hello</li></ul>\n", ((MockHttpServletResponse) pageContext.getResponse()).getContentAsString());
+        assertEquals("<ul><li>Name = Hello</li></ul>" + newLine, ((MockHttpServletResponse) pageContext.getResponse()).getContentAsString());
     }
 
     @Test
@@ -299,7 +301,7 @@
         when(messageSource.getMessage("attr.test", null, Locale.getDefault())).thenReturn("Lisa");
 
         assertEquals(Tag.SKIP_BODY, tag.doStartTag());
-        assertEquals("<ul><li>Name = Computer</li><li>Lisa = Fellow</li></ul>\n", ((MockHttpServletResponse) pageContext.getResponse()).getContentAsString());
+        assertEquals("<ul><li>Name = Computer</li><li>Lisa = Fellow</li></ul>" + newLine, ((MockHttpServletResponse) pageContext.getResponse()).getContentAsString());
     }
 
     @Test
@@ -310,7 +312,7 @@
         when(messageSource.getMessage("attr.aProp", null, Locale.getDefault())).thenReturn("Name");
 
         assertEquals(Tag.SKIP_BODY, tag.doStartTag());
-        assertEquals("<ul><li>Name = 01.11.2010</li></ul>\n", ((MockHttpServletResponse) pageContext.getResponse()).getContentAsString());
+        assertEquals("<ul><li>Name = 01.11.2010</li></ul>" + newLine, ((MockHttpServletResponse) pageContext.getResponse()).getContentAsString());
     }
 
     @Test
@@ -323,7 +325,7 @@
         when(messageSource.getMessage("attr.aProp", null, Locale.getDefault())).thenReturn("Name");
 
         assertEquals(Tag.SKIP_BODY, tag.doStartTag());
-        assertEquals("<ul><li>Name = 1-Nov-2010</li></ul>\n", ((MockHttpServletResponse) pageContext.getResponse()).getContentAsString());
+        assertEquals("<ul><li>Name = 1-Nov-2010</li></ul>" + newLine, ((MockHttpServletResponse) pageContext.getResponse()).getContentAsString());
     }
 
     @Test
@@ -336,6 +338,6 @@
         when(messageSource.getMessage("attr.aProp", null, Locale.getDefault())).thenReturn("Name");
 
         assertEquals(Tag.SKIP_BODY, tag.doStartTag());
-        assertEquals("<ul><li>Name = 01-Nov-2010</li></ul>\n", ((MockHttpServletResponse) pageContext.getResponse()).getContentAsString());
+        assertEquals("<ul><li>Name = 01-Nov-2010</li></ul>" + newLine, ((MockHttpServletResponse) pageContext.getResponse()).getContentAsString());
     }
 }
